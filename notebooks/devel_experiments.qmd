---
title: "Quick check if new functions work as expected"
author: Constantin Ahlmann-Eltze
format:
    html:
        code-fold: false
        embed-resources: true
        highlight-style: github
        toc: true 
        code-line-numbers: true 
execute:
  keep-ipynb: true
jupyter: python3
---


```{python}
%load_ext autoreload
%autoreload 2
```


```{python}
import debugpy
debugpy.listen(5678)
print("Waiting for debugger attach")
debugpy.wait_for_client()
```

Convert formula to design matrix in Python

```{python}
import numpy as np
from patsy import dmatrices, dmatrix, demo_data
```


```{python}
data = demo_data("a", "b", "x1", "x2", "y", "z column", min_rows = 400)
data
```

```{python}
form = dmatrix("~ a + x1", data)
```


```{python}
from pyLemur.handle_design import *
from pyLemur.row_groups import *
```

```{python}
des, form = convert_formula_to_design_matrix("~ a + x1", data)
```


```{python}
row_groups(des)
```


```{python}
# 400 cells, 30 features 
Y = np.random.rand(400, 30)
```


```{python}
import sklearn.decomposition as skd

pca_fit = PCA(n_components=2)
emb = pca_fit.fit_transform(Y)
pca_fit.score(Y)
pca_fit.mean_
```


```{python}
svd = skd.TruncatedSVD(n_components=2)

```

```{python}
from pyLemur.pca import *

pca = fit_pca(Y, 2, center=False)
pca

```


```{python}
from pyLemur.lin_alg_wrappers import *
from pyLemur.design_matrix_utils import *

data = demo_data("a", "b", "x1", "x2", "y", "z column", min_rows = 400)
des, form = convert_formula_to_design_matrix("~ a + x1", data)
Y = np.random.rand(400, 30)
beta = ridge_regression(Y, des, 0)
beta
```

```{python}

```
